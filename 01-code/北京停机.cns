#######UDP部分########
httpUDP::udp {
udp_tproxy_listen = 0.0.0.0:6650;
udp_socks5_listen = 0.0.0.0:1081
destaddr = 10.0.0.200:80;
httpMod = tunnel;
header_host = 121.5.60.75:8080;
encrypt = 903102;
}

tcp::Global {
tcp_listen = :::6650;
}

tcpProxy::http_proxy {
//HTTP代理地址
destAddr = 10.0.0.200:80;
httpMod = http;
}
//HTTP模式
httpMod::http {
del_line = host;
set_first = “[M] [U] [V]\r\nX-Online-Host:\t\t [H]\r\nHost:a.189.cn\r\n“;
}

tcpProxy::https_proxy {
//HTTPS代理地址
destAddr = 10.0.0.200:80;
tunnelHttpMod = tunnel;
tunnel_proxy = on;
}
//HTTPS模式
httpMod::tunnel {
del_line = host;
set_first = “CONNECT \t [H]@a.189.cn [V]\r\n“;

}



//ssl端口先建立CONNECT连接
tcpAcl::firstConnect {
tcpProxy = https_proxy;
matchMode = firstMatch;
//读取数据后尝试匹配tcpAcl::http模块
reMatch = http;
continue: dst_port != 80;
continue: dst_port != 8080;
dst_port != 6650;
}
//匹配普通http请求
tcpAcl::http {
tcpProxy = http_proxy;
method != IS_NOT_HTTP|CONNECT;
}
tcpAcl::CONNECT {
tcpProxy = https_proxy;
dst_port != 0;
}


dns::Global {
dns_listen = :::65053;
cachePath = /dev/null;
}
dnsAcl {
httpMod = http;
//HTTP代理地址
destAddr = 10.0.0.200:80;
header_host = 119.29.29.29;
//只解析A记录(IPV4)和AAAA记录(IPV6)
query_type = A;
query_type = AAAA;
query_type = NS;
query_type = MX;
query_type = TXT;
}

//用于接收socks5请求
socks5::recv_socks5 {
socks5_listen = 0.0.0.0:1081;
socks5_dns = 127.0.0.1:6653;
handshake_timeout = 60;
}

Tun {
tunAddr4 = 10.0.0.1;
tunAddr6 = fc00::1;
tunMtu = 1500;
tunDevice = tunDev;
}